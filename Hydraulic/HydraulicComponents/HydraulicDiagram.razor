@inject SpawnEvents SpawnEvents;
@inject ComponentRegister ComponentRegister;

<div style="height:500px ; width:100%; background-color:lightgray">
    <CascadingValue Value="Diagram">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

@using Blazor.Diagrams.Core;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Components;
@using Blazor.Diagrams.Core.Geometry;
@using HydraulicComponents;
@using HydraulicComponents.Properties;

@code {

    public Diagram Diagram { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            GridSize = 10,
            Links = new DiagramLinkOptions
            {
                // Options related to links
                EnableSnapping = true,
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
                                 // Other
            }
        };

        Diagram = new Diagram(options);
        Diagram.RegisterModelComponent<TestModel, TestComponent>();

        SpawnEvents.ComponentSpawned += CreateComponentClicked;

        Setup();
    }

    private void Setup()
    {
        var node1 = NewNode(50, 50);
        var node2 = NewNode(300, 300);
        var node3 = NewNode(300, 50);
        Diagram.Nodes.Add(node1);
        Diagram.Nodes.Add(node2);
        Diagram.Nodes.Add(node3);

    }

    public void CreateComponentClicked(int key)
    {
        // Get component from the registry
        ComponentData newComponent = ComponentRegister.GetComponent(key);
        // Create and spawn the component
        var model = new TestModel(new Point(0, 0), newComponent.image, newComponent.props, newComponent.ports);
        Diagram.Nodes.Add(model);
    }

    private NodeModel NewNode(double x, double y)
    {
        var node = new NodeModel(new Point(x, y));
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Left);
        node.AddPort(PortAlignment.Right);
        return node;
    }


}
