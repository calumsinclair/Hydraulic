@inject SpawnEvents SpawnEvents;
@inject ComponentRegister ComponentRegister;

<div style="height:100% ; width:100%; background-color:lightgray">
    <CascadingValue Value="Diagram">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

@using Blazor.Diagrams.Core;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Components;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models.Base;
@using HydraulicComponents;
@using HydraulicComponents.Properties;
@using Calculations;

@code {

    public Diagram Diagram { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            GridSize = 10,
            Links = new DiagramLinkOptions
            {
                // Options related to links
                EnableSnapping = true
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
                                 // Other
            }
        };

        Diagram = new Diagram(options);
        Diagram.RegisterModelComponent<TestModel, TestComponent>();

        SpawnEvents.ComponentSpawned += CreateComponentClicked;

        // Custom link test  
        Diagram.RegisterModelComponent<CustomLinkModel, CustomLinkComponent>();
        Diagram.Options.Links.DefaultLinkComponent = typeof(CustomLinkComponent);
        Diagram.Options.Links.Factory = (Diagram diagram, PortModel sourcePort) => { return new CustomLinkModel(sourcePort); };

        // Calculations 
        CalculationManager calcManager = new CalculationManager(Diagram);
        // On new link connected 
        Diagram.Links.Added += (BaseLinkModel b) =>
        { b.TargetPortChanged += (BaseLinkModel b, PortModel p, PortModel x) => calcManager.ReCalculate(); };

    }

    public void CreateComponentClicked(int key)
    {
        // Get component from the registry
        ComponentData newComponent = ComponentRegister.GetComponent(key);

        // Create and spawn the component
        var model = new TestModel(new Point(0, 0), newComponent.displayState(), newComponent.props(), newComponent.ports);
        Diagram.Nodes.Add(model);
    }

    private NodeModel NewNode(double x, double y)
    {
        var node = new NodeModel(new Point(x, y));
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Left);
        node.AddPort(PortAlignment.Right);
        return node;
    }


}
