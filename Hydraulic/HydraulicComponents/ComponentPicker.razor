@using Hydraulic
@using Hydraulic.HydraulicComponents;
@using Shared
@using System.IO
@using System.Text.RegularExpressions

@inject SpawnEvents SpawnEvents
@inject ComponentRegister registry

<div class=" Components">
    <SectionHeader>Components</SectionHeader>
    <div class="grid-container">
        @foreach (var component in registry.GetComponents())
        {
            <div class="grid-item" @onclick='() => SpawnEvents.OnComponentSpawned(component.Key)'>
                <img src="@component.Value.displayState.Images[@component.Value.displayState.RepresentativeIndex]"
                     height="@component.Value.displayState.ImageSize[@component.Value.displayState.RepresentativeIndex].Item2"
                     width="@component.Value.displayState.ImageSize[@component.Value.displayState.RepresentativeIndex].Item1" />
                <p>@ComponentNameFromFilename(@component.Value.displayState.Images[@component.Value.displayState.RepresentativeIndex])</p>
            </div>
        }
    </div>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private string ComponentNameFromFilename(string filename)
    {
        filename = filename.Trim();
        var name = Path.GetFileName(filename);
        var extension = Path.GetExtension(filename);

        name = name.Substring(0, name.Length - extension.Length);
        return Regex.Replace(name, "([A-Z])", " $1"); ; // Add spaces between Capital letter
    }

}
