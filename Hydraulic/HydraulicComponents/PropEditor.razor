@using Shared

<SectionHeader>Properties</SectionHeader>

<div class="propEditor">
    @{
        if (component != null)
        {
            // Gets information about vairables in the record
            Type pumpType = component.GetType();
            FieldInfo[] fields = pumpType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance);

            foreach (var field in fields)
            {
                var fieldType = field.FieldType;
                if (fieldType.IsEnum)
                {
                    <span>@StringCut(field.Name)</span>

                    <select @onchange="(e) => SetPropertyEnum(field, e.Value.ToString())">

                    @foreach (var value in Enum.GetValues(fieldType))
                    {
                        <option>@value</option>
                    }

                    </select>
                }
                else if (fieldType == typeof(int))
                {
                    <span>@StringCut(field.Name) </span>
                    <input type="number"
                           @bind="PropertyVars[field.Name]"
                           @onfocusout="()=>field.SetValue(component, int.Parse(PropertyVars[field.Name]))">
                }
            }
        }
    }

</div>

@using HydraulicComponents.Properties;
@using System.Reflection;

@inject SpawnEvents SpawnEvents;

@code {

    private IProperties component;

    private Dictionary<string, string> PropertyVars = new Dictionary<string, string>();
    private Action propertiesUpdated;


    protected override void OnInitialized()
    {
        SpawnEvents.ComponentSelected += DisplaySelectedProps;
    }

    // Event to refresh the properties panel 
    private void DisplaySelectedProps(IProperties newProps, Action onPropsUpdated)
    {
        propertiesUpdated = onPropsUpdated;
        PropertyVars.Clear();
        component = newProps;

        Type pumpType = component.GetType();
        FieldInfo[] fields = pumpType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance);
        foreach (var field in fields)
        {
            PropertyVars.Add(field.Name, field.GetValue(component).ToString());
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void SetPropertyEnum(FieldInfo field, string value)
    {
        field.SetValue(component, Enum.Parse(field.FieldType, value));
        propertiesUpdated();
    }

    private string StringCut(string newString)
    {
        int pFrom = newString.IndexOf("<") + 1;
        int pTo = newString.LastIndexOf(">");

        if (pFrom == -1 || pTo == -1)
        {
            Console.Error.WriteLine("Failed to convert the string when reflecting on the properties");
        }

        return newString.Substring(pFrom, pTo - pFrom);
    }
}
