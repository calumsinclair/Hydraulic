@page "/"

<h1>Hello, world!</h1>

Welcome to your new app.

<div style="height:500px ; width:500px">
    <!-- Add this where you want to show the diagram -->
    <CascadingValue Value="Diagram">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>


@using Blazor.Diagrams.Core;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Components;
@using Blazor.Diagrams.Core.Geometry;
@using HydraulicComponents;
@using HydraulicComponents.Properties;

@code {

    public Diagram Diagram { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();


        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            GridSize = 10,
            Links = new DiagramLinkOptions
            {
                // Options related to links
                EnableSnapping = true,
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
                                 // Other
            }
        };

        Diagram = new Diagram(options);
        Diagram.RegisterModelComponent<TestModel, TestComponent>();

        Setup();
    }

    private void Setup()
    {
        var node1 = NewNode(50, 50);
        var node2 = NewNode(300, 300);
        var node3 = NewNode(300, 50);
        Diagram.Nodes.Add(node1);
        Diagram.Nodes.Add(node2);
        Diagram.Nodes.Add(node3);

        Diagram.Nodes.Add(SpawnPump(new Point(10, 10)));

        reflectionTest();
    }

    private NodeModel NewNode(double x, double y)
    {
        var node = new NodeModel(new Point(x, y));
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Left);
        node.AddPort(PortAlignment.Right);
        return node;
    }

    private TestModel SpawnPump(Point p)
    {
        PortAlignment[] ports = { PortAlignment.Top, PortAlignment.Bottom };
        return new TestModel(p, "pump.png", new Pump(PumpType.FIXED_DISPLACEMENT), ports);
    }

    private void reflectionTest()
    {
        // testing get pump props
        IProperties p = new Pump(PumpType.FIXED_DISPLACEMENT);

        Type t = p.GetType();

        var props = t.GetProperties();
        foreach (var prop in props)
        {
            Console.WriteLine(prop.ToString());
            var propType = prop.PropertyType;
            if (propType.IsEnum)
            {
                Console.WriteLine("prop is enum, valid values are:");
                foreach (var v in Enum.GetValues(prop.PropertyType))
                    Console.WriteLine(v);
            }
            else if (propType == typeof(Single))
            {

                var attributes = prop.CustomAttributes;
                foreach (var att in attributes)
                {
                    Console.WriteLine(att);
                }
            }
        }
    }
}
