@using System.Reflection;
<td>
    <span>@prop.Name</span>
</td>
@if (prop.PropertyType.IsEnum)
{
    <td>
        <select @onchange="(e) => OnValueChange.InvokeAsync(e.Value.ToString())">

            @foreach (var value in Enum.GetValues(prop.PropertyType))
            {
                if ((int)value == (int)this.value)
                {
                    <option selected>@value</option>
                }
                else
                {
                    <option>@value</option>
                }
            }

        </select>
    </td>
}
else if (prop.PropertyType == typeof(int))
{
    <td><input type="number" value="@value.ToString()" @onchange="(e) => OnValueChange.InvokeAsync(e.Value.ToString())"></td>
}

else if (prop.PropertyType == typeof(float))
{
    <td><input type=number step=any value="@value.ToString()" @onchange="(e) => OnValueChange.InvokeAsync(e.Value.ToString())"></td>
}

@code {

    [Parameter]
    public EventCallback<string> OnValueChange { get; set; }

    [Parameter]
    public PropertyInfo prop { get; set; }

    [Parameter]
    public object value { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

}
