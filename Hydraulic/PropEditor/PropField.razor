@using System.Reflection;
<td>
    <span>@propName</span>
</td>
@if (propType.IsEnum)
{
    <td>
        <select @onchange="(e) => PropChanged(()=>Enum.Parse(propType, e.Value.ToString()))">

            @foreach (var value in Enum.GetValues(propType))
            {
                if ((int)value == (int)this.value)
                {
                    <option selected>@value</option>
                }
                else
                {
                    <option>@value</option>
                }
            }

        </select>
    </td>
}
else if (propType == typeof(int))
{
    <td><input type="number" value="@value.ToString()" @onchange="(e) => PropChanged(()=>int.Parse(e.Value.ToString()))"></td>
}

else if (propType == typeof(float))
{
    <td><input type=number step=any value="@value.ToString()" @onchange="(e) => PropChanged(()=>float.Parse(e.Value.ToString()))"></td>
}

@code {

    [Parameter]
    public EventCallback<object> OnValueChange { get; set; }

    [Parameter]
    public Type propType { get; set; }

    [Parameter]
    public string propName { get; set; }

    [Parameter]
    public object value { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private string StringCut(string newString)
    {
        int pFrom = newString.IndexOf("<") + 1;
        int pTo = newString.LastIndexOf(">");

        if (pFrom == -1 || pTo == -1)
        {
            Console.Error.WriteLine("Failed to convert the string when reflecting on the properties");
        }

        return newString.Substring(pFrom, pTo - pFrom);
    }

    private void PropChanged(Func<object> parse)
    {
        try
        {
            OnValueChange.InvokeAsync(parse());
        }catch(Exception e)
        {
            Console.WriteLine("Failed to parse input "+e.Message);
        }
    }

}
