@using Hydraulic.Shared

<SectionHeader>Properties</SectionHeader>

<div class="propEditor">
        @if (component != null)
        {
            // Gets information about vairables in the record
            Type componentType = component.GetType();
            PropertyInfo[] props = componentType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);

            <table class="field-list">
                @foreach (var prop in props)
                {
                    var observaleProp = prop.GetValue(component);
                    <tr class="field">
                    <PropField 
                        propType=@prop.PropertyType.GenericTypeArguments[0]
                        propName=@prop.Name
                        value=@observaleProp.GetType().GetProperty("Value").GetValue(observaleProp)
                        OnValueChange="(newVal) => onPropChange(prop, newVal)" />
                    </tr>
                }
            </table>
        }
</div>

@using HydraulicComponents.Properties;
@using System.Reflection;

@inject SpawnEvents SpawnEvents;

@code {

    private Properties component;

    protected override void OnInitialized()
    {
        SpawnEvents.ComponentSelected += DisplaySelectedProps;
    }

    // Event to refresh the properties panel
    private void DisplaySelectedProps(Properties newProps)
    {
        component = newProps;
        newProps.OnPropertyChanged += UpdateWindow;

        UpdateWindow(newProps);
    }

    private void UpdateWindow(Properties props)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void onPropChange(PropertyInfo field, object value)
    {

        object c = field.GetGetMethod().Invoke(component, null);
        object[] args = { value };
        c.GetType().GetProperty("Value").GetSetMethod().Invoke(c, args);
    }
}

