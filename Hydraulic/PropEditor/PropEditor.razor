@using Hydraulic.Shared

<SectionHeader>Properties</SectionHeader>

<div class="propEditor">
        @if (component != null)
        {
            // Gets information about vairables in the record
            Type pumpType = component.GetType();
            PropertyInfo[] props = pumpType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);

            <table class="field-list">
                @foreach (var prop in props)
                {
                    <tr class="field">
                    <PropField prop=@prop value=@prop.GetValue(component) OnValueChange="(newVal) => onPropChange(prop, newVal)" />
                    </tr>
                }
            </table>
        }
</div>

@using HydraulicComponents.Properties;
@using System.Reflection;

@inject SpawnEvents SpawnEvents;

@code {

    private Properties component;
    private Action propertiesUpdated;

    protected override void OnInitialized()
    {
        SpawnEvents.ComponentSelected += DisplaySelectedProps;
    }

    // Event to refresh the properties panel
    private void DisplaySelectedProps(Properties newProps, Action onPropsUpdated)
    {
        propertiesUpdated = onPropsUpdated;
        component = newProps;
        newProps.Observer += UpdateWindow;

        UpdateWindow(newProps);
    }

    private void UpdateWindow(Properties props)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    private void onPropChange(PropertyInfo prop, string value)
    {
        component.UpdateValue(prop, value);
        propertiesUpdated();
    }


}

